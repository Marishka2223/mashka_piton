Операции с целыми числами: 

a = 1 + 2 - плюс
b = 1 * 2 -умножение
b = 1 - 2 - минус
c = 10 / 5 - деление
d = 10 // 5 - деление (целое частное, фиксированное число)
e = 10 % 5 - остаток от числа
f = 1 ** 2 -возведение в степень
g = -42; print(g) = -42 - запись отриц. числа
h = +-+42; print(h) = 42
j = +42; print(j) = 42 - запись полож. числа

Операции с вещественными числами:

a = 0.5 - вещественное число
b = 3e-1 - экспонента (e - умножение на 10, число после e - степень, в которую возводится 10 ( в данном случае -1 степени))

Типы данных:

float - числовой тип данных для вещественных чисел ( с запятой после целого числа - 0.9;0.3333 итп)

int - строго целые числа

bool - логическое ( В Python, тип данных bool (сокращение от "boolean", что означает "логический") используется для представления логических значений: True или False. Логические значения часто используются в условных операторах (if, elif, else) и циклах (while, for):
1)
is_raining = True
is_sunny = False
if is_raining:
    print("Бери зонт!")
else:
    print("Зонт не нужен.")

2) 
for i in range(5):
    if i % 2 == 0:
        print(f"{i} - четное число")
    else:
        print(f"{i} - нечетное число")


str - строка

Преобразование типов:

int(a) - преобразование результата в тип данного int
float(a) - преобразование результата в тип данного float

type - узнать тип данного:
a= type(5)
print(a)
---
<class 'int'>

Переменные:

a = 3 - ввод 1 переменной; a - имя переменной, = - оператор присваивания переменной, 3 - значение
b = 4 - ввод 2 переменной
print(a + b) - вывод суммы 1 и 2 переменных

a = 2;
a += 3 - увелечение значения a на 3 ( 2+3)
a -= 3 - уменьшение на 3
а *= 3 - умножение на 3
а /= 3 - деление на 3 с отсатком
а //= 3 - деление на 3 без остатка
a **=3 - возведение в степень ( в степень 3)
a %=3 - процент от (2)

b = 'aboba' - текстовой тип данных
Имя переменной:

- может состоять из букв, цифр, подчеркивания

- должно начинаться с буквы или подчёркивания

- не должно являться ключевым словом

- регистр букв имеет значение

---------------

input - ввод с клавиатуры

a = int(input()) - преобразованный ввод с клавиатуры преобраз.в число

print(a) -вывод данных в конечный результат 

задачи:

1) Тимофей обычно спит ночью  X часов и устраивает себе днем тихий час на Y минут. Определите, сколько всего минут Тимофей спит в сутки (python)
X = int(input())
Y = int(input())
print(X*60 + Y)

2)
Коля каждый день ложится спать ровно в полночь и недавно узнал, что оптимальное время для его сна составляет X минут. Коля хочет поставить себе будильник так, чтобы он прозвенел ровно через  X минут после полуночи, однако для этого необходимо указать время сигнала в формате часы, минуты. Помогите Коле определить, на какое время завести будильник (python):

optimal = int(input())
hours = (optimal // 60) % 24
minutes = optimal % 60
print(hours)
print(minutes)


3) 
Катя узнала, что ей для сна надо X минут. В отличие от Коли, Катя ложится спать после полуночи в  H часов и  M минут. Помогите Кате определить, на какое время ей поставить будильник, чтобы он прозвенел ровно через X минут после того, как она ляжет спать (python):

optimal_sleep = int(input()) - оптимальный час, в который катя ложится

# Ввод времени, когда Катя ложится спать
hours_start = int(input())
minutes_start = int(input())

# Переводим время сна в минуты
total_minutes = hours_start * 60 + minutes_start

# Вычисляем время будильника
alarm_time = total_minutes + optimal_sleep

# Переводим время будильника в часы и минуты
alarm_hours = (alarm_time // 60) % 24
alarm_minutes = alarm_time % 60

# Выводим время установки будильника
print(alarm_hours)
print(alarm_minutes)


-------

Логические операции:


< строго меньше

> строго больше

<= меньше или равно
>= больше или равно

== равно

!= не равно


or - или

and - и

not - не


----


Условия:

if ...:
....
else:


if ...:
....
elif: (else if)
.....
else:



-----

Строки:

'/n' - символ перевода строки


----

Цикл while:

Схема:

while <логическое условие>:

действие 1
действие 2
...


Операторы:

break - досрочное завершение

continue -переход к следующей итерации

Цикл for в Python используется для перебора элементов последовательности (списка, строки, кортежа, множества или словаря) или других объектов, которые являются итерируемыми (могут возвращать свои элементы по одному). Он позволяет вам выполнять блок кода для каждого элемента в итерируемом объекте.

range - функция, возвращающая последовательность

'/t' - табуляция

----

Строки и символы

genome = 'ATGG'

genome[1] = A
genome[2] = T
genome[3] = G
genome[4] = G

genome[-1] = G
genome[-2] = G
genome[-3] = T
genome[-4] = A

i = 1
print(genome[i]) 
A

for i in range(4):
print(genome[i]) 


genome = input()
cnt = 0

for nucl in genome:
if nucl == 'C:
cnt +=1

print(cnt)

genome = input()
print(genome.count('C')) 
( s.count - сколько раз строка p встречается в строке s)


команды: 

[ s = 'ATGcc' p = 'cc'
s.upper() - делает строку в верхнем регистре
s.lower() -делает строку в нижнем регистре
s.count - сколько раз строка p встречается в строке s
s.find(p) - первое вхождение p в s 
s.find('A') - строка 'А' не входит в строку s (Большой буквы А нет в строке)
s.replace('c','C') - меняем вхождения c на С
len(s) - узнать длину строки


----

Списки/Массивы

students = ['Ivan', 'Sasha', 'Masha']
len(students) - длина массива

students[:2] 
Ivan, Sasha

добавление элементов в массив:

students.append('Olga')
students += ['Roman', 'Nikita']

пустой список:
students = []

вставка в элемент:
students.insert(1,'Nikita')


удаление элементов:
students = ['Ivan', 'Sasha', 'Masha']
students.remove('Sasha') / del students(0)

сортировка списка:

